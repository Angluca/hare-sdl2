use types::c;
use sdl::v2c::*;

export type TTF_Font = opaque;

export def UNICODE_BOM_NATIVE: u16 = 0xFEFF;
export def UNICODE_BOM_SWAPPED: u16 = 0xFFFE;

export def TTF_STYLE_NORMAL = 0x00;
export def TTF_STYLE_BOLD = 0x01;
export def TTF_STYLE_ITALIC = 0x02;
export def TTF_STYLE_UNDERLINE = 0x04;
export def TTF_STYLE_STRIKETHROUGH = 0x08;

export def TTF_HINTING_NORMAL = 0;
export def TTF_HINTING_LIGHT = 1;
export def TTF_HINTING_MONO = 2;
export def TTF_HINTING_NONE = 3;
export def TTF_HINTING_LIGHT_SUBPIXEL = 4;

export def TTF_WRAPPED_ALIGN_LEFT = 0;
export def TTF_WRAPPED_ALIGN_CENTER = 1;
export def TTF_WRAPPED_ALIGN_RIGHT = 2;

export @symbol("TTF_Linked_Version") fn TTF_Linked_Version() *SDL_version;
export @symbol("TTF_GetFreeTypeVersion") fn TTF_GetFreeTypeVersion(major: nullable *int, minor: nullable *int, patch: nullable *int) void;
export @symbol("TTF_GetHarfBuzzVersion") fn TTF_GetHarfBuzzVersion(major: nullable *int, minor: nullable *int, patch: nullable *int) void;
export @symbol("TTF_ByteSwappedUNICODE") fn TTF_ByteSwappedUNICODE(swapped: bool) void;
export @symbol("TTF_Init") fn TTF_Init() int;
export @symbol("TTF_OpenFont") fn TTF_OpenFont(file: *c::char, ptsize: int) nullable *TTF_Font;
export @symbol("TTF_OpenFontIndex") fn TTF_OpenFontIndex(file: *c::char, ptsize: int, index: i32) nullable *TTF_Font;
export @symbol("TTF_OpenFontRW") fn TTF_OpenFontRW(src: *SDL_RWops, freesrc: int, ptsize: int) nullable *TTF_Font;
export @symbol("TTF_OpenFontIndexRW") fn TTF_OpenFontIndexRW(src: *SDL_RWops, freesrc: int, ptsize: int, index: i32) nullable *TTF_Font;
export @symbol("TTF_OpenFontDPI") fn TTF_OpenFontDPI(file: *c::char, ptsize: int, hdpi: int, vdpi: int) nullable *TTF_Font;
export @symbol("TTF_OpenFontIndexDPI") fn TTF_OpenFontIndexDPI(file: *c::char, ptsize: int, index: i32, hdpi: int, vdpi: int) nullable *TTF_Font;
export @symbol("TTF_OpenFontDPIRW") fn TTF_OpenFontDPIRW(src: *SDL_RWops, freesrc: int, ptsize: int, hdpi: int, vdpi: int) nullable *TTF_Font;
export @symbol("TTF_OpenFontIndexDPIRW") fn TTF_OpenFontIndexDPIRW(src: *SDL_RWops, freesrc: int, ptsize: int, index: i32, hdpi: int, vdpi: int) nullable *TTF_Font;
export @symbol("TTF_SetFontSize") fn TTF_SetFontSize(font: *TTF_Font, ptsize: int) int;
export @symbol("TTF_SetFontSizeDPI") fn TTF_SetFontSizeDPI(font: *TTF_Font, ptsize: int, hdpi: int, vdpi: int) int;
export @symbol("TTF_GetFontStyle") fn TTF_GetFontStyle(font: *TTF_Font) int;
export @symbol("TTF_SetFontStyle") fn TTF_SetFontStyle(font: *TTF_Font, style: int) void;
export @symbol("TTF_GetFontOutline") fn TTF_GetFontOutline(font: *TTF_Font) int;
export @symbol("TTF_SetFontOutline") fn TTF_SetFontOutline(font: *TTF_Font, outline: int) void;
export @symbol("TTF_GetFontHinting") fn TTF_GetFontHinting(font: *TTF_Font) int;
export @symbol("TTF_SetFontHinting") fn TTF_SetFontHinting(font: *TTF_Font, hinting: int) void;
export @symbol("TTF_GetFontWrappedAlign") fn TTF_GetFontWrappedAlign(font: *TTF_Font) int;
export @symbol("TTF_SetFontWrappedAlign") fn TTF_SetFontWrappedAlign(font: *TTF_Font, align_: int) void;
export @symbol("TTF_FontHeight") fn TTF_FontHeight(font: *TTF_Font) int;
export @symbol("TTF_FontAscent") fn TTF_FontAscent(font: *TTF_Font) int;
export @symbol("TTF_FontDescent") fn TTF_FontDescent(font: *TTF_Font) int;
export @symbol("TTF_FontLineSkip") fn TTF_FontLineSkip(font: *TTF_Font) int;
export @symbol("TTF_GetFontKerning") fn TTF_GetFontKerning(font: *TTF_Font) int;
export @symbol("TTF_SetFontKerning") fn TTF_SetFontKerning(font: *TTF_Font, allowed: int) void;
export @symbol("TTF_FontFaces") fn TTF_FontFaces(font: *TTF_Font) i32;
export @symbol("TTF_FontFaceIsFixedWidth") fn TTF_FontFaceIsFixedWidth(font: *TTF_Font) int;
export @symbol("TTF_FontFaceFamilyName") fn TTF_FontFaceFamilyName(font: *TTF_Font) *c::char;
export @symbol("TTF_FontFaceStyleName") fn TTF_FontFaceStyleName(font: *TTF_Font) *c::char;
export @symbol("TTF_GlyphIsProvided") fn TTF_GlyphIsProvided(font: *TTF_Font, ch: u16) int;
export @symbol("TTF_GlyphIsProvided32") fn TTF_GlyphIsProvided32(font: *TTF_Font, ch: u32) int;
export @symbol("TTF_GlyphMetrics") fn TTF_GlyphMetrics(font: *TTF_Font, ch: u16, minx: *int, maxx: *int, miny: *int, maxy: *int, advance: *int) int;
export @symbol("TTF_GlyphMetrics32") fn TTF_GlyphMetrics32(font: *TTF_Font, ch: u32, minx: *int, maxx: *int, miny: *int, maxy: *int, advance: *int) int;
export @symbol("TTF_SizeText") fn TTF_SizeText(font: *TTF_Font, text: *c::char, w: nullable *int, h: nullable *int) int;
export @symbol("TTF_SizeUTF8") fn TTF_SizeUTF8(font: *TTF_Font, text: *c::char, w: nullable *int, h: nullable *int) int;
export @symbol("TTF_SizeUNICODE") fn TTF_SizeUNICODE(font: *TTF_Font, text: *u16, w: nullable *int, h: nullable *int) int;
export @symbol("TTF_MeasureText") fn TTF_MeasureText(font: *TTF_Font, text: *c::char, measure_width: int, extent: nullable *int, count: nullable *int) int;
export @symbol("TTF_MeasureUTF8") fn TTF_MeasureUTF8(font: *TTF_Font, text: *c::char, measure_width: int, extent: nullable *int, count: nullable *int) int;
export @symbol("TTF_MeasureUNICODE") fn TTF_MeasureUNICODE(font: *TTF_Font, text: *u16, measure_width: int, extent: nullable *int, count: nullable *int) int;
export @symbol("TTF_RenderText_Solid") fn TTF_RenderText_Solid(font: *TTF_Font, text: *c::char, fg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderUTF8_Solid") fn TTF_RenderUTF8_Solid(font: *TTF_Font, text: *c::char, fg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderUNICODE_Solid") fn TTF_RenderUNICODE_Solid(font: *TTF_Font, text: *u16, fg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderText_Solid_Wrapped") fn TTF_RenderText_Solid_Wrapped(font: *TTF_Font, text: *c::char, fg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderUTF8_Solid_Wrapped") fn TTF_RenderUTF8_Solid_Wrapped(font: *TTF_Font, text: *c::char, fg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderUNICODE_Solid_Wrapped") fn TTF_RenderUNICODE_Solid_Wrapped(font: *TTF_Font, text: *u16, fg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderGlyph_Solid") fn TTF_RenderGlyph_Solid(font: *TTF_Font, ch: u16, fg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderGlyph32_Solid") fn TTF_RenderGlyph32_Solid(font: *TTF_Font, ch: u32, fg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderText_Shaded") fn TTF_RenderText_Shaded(font: *TTF_Font, text: *c::char, fg: SDL_Color, bg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderUTF8_Shaded") fn TTF_RenderUTF8_Shaded(font: *TTF_Font, text: *c::char, fg: SDL_Color, bg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderUNICODE_Shaded") fn TTF_RenderUNICODE_Shaded(font: *TTF_Font, text: *u16, fg: SDL_Color, bg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderText_Shaded_Wrapped") fn TTF_RenderText_Shaded_Wrapped(font: *TTF_Font, text: *c::char, fg: SDL_Color, bg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderUTF8_Shaded_Wrapped") fn TTF_RenderUTF8_Shaded_Wrapped(font: *TTF_Font, text: *c::char, fg: SDL_Color, bg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderUNICODE_Shaded_Wrapped") fn TTF_RenderUNICODE_Shaded_Wrapped(font: *TTF_Font, text: *u16, fg: SDL_Color, bg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderGlyph_Shaded") fn TTF_RenderGlyph_Shaded(font: *TTF_Font, ch: u16, fg: SDL_Color, bg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderGlyph32_Shaded") fn TTF_RenderGlyph32_Shaded(font: *TTF_Font, ch: u32, fg: SDL_Color, bg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderText_Blended") fn TTF_RenderText_Blended(font: *TTF_Font, text: *c::char, fg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderUTF8_Blended") fn TTF_RenderUTF8_Blended(font: *TTF_Font, text: *c::char, fg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderUNICODE_Blended") fn TTF_RenderUNICODE_Blended(font: *TTF_Font, text: *u16, fg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderText_Blended_Wrapped") fn TTF_RenderText_Blended_Wrapped(font: *TTF_Font, text: *c::char, fg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderUTF8_Blended_Wrapped") fn TTF_RenderUTF8_Blended_Wrapped(font: *TTF_Font, text: *c::char, fg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderUNICODE_Blended_Wrapped") fn TTF_RenderUNICODE_Blended_Wrapped(font: *TTF_Font, text: *u16, fg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderGlyph_Blended") fn TTF_RenderGlyph_Blended(font: *TTF_Font, ch: u16, fg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderGlyph32_Blended") fn TTF_RenderGlyph32_Blended(font: *TTF_Font, ch: u32, fg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderText_LCD") fn TTF_RenderText_LCD(font: *TTF_Font, text: *c::char, fg: SDL_Color, bg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderUTF8_LCD") fn TTF_RenderUTF8_LCD(font: *TTF_Font, text: *c::char, fg: SDL_Color, bg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderUNICODE_LCD") fn TTF_RenderUNICODE_LCD(font: *TTF_Font, text: *u16, fg: SDL_Color, bg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderText_LCD_Wrapped") fn TTF_RenderText_LCD_Wrapped(font: *TTF_Font, text: *c::char, fg: SDL_Color, bg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderUTF8_LCD_Wrapped") fn TTF_RenderUTF8_LCD_Wrapped(font: *TTF_Font, text: *c::char, fg: SDL_Color, bg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderUNICODE_LCD_Wrapped") fn TTF_RenderUNICODE_LCD_Wrapped(font: *TTF_Font, text: *u16, fg: SDL_Color, bg: SDL_Color, wrapLength: u32) nullable *SDL_Surface;
export @symbol("TTF_RenderGlyph_LCD") fn TTF_RenderGlyph_LCD(font: *TTF_Font, ch: u16, fg: SDL_Color, bg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_RenderGlyph32_LCD") fn TTF_RenderGlyph32_LCD(font: *TTF_Font, ch: u32, fg: SDL_Color, bg: SDL_Color) nullable *SDL_Surface;
export @symbol("TTF_CloseFont") fn TTF_CloseFont(font: nullable *TTF_Font) void;
export @symbol("TTF_Quit") fn TTF_Quit() void;
export @symbol("TTF_WasInit") fn TTF_WasInit() int;
export @symbol("TTF_SetFontScriptName") fn TTF_SetFontScriptName(font: *TTF_Font, script: *c::char) int;
