use types::c;

export type SDL_malloc_func = *fn(size_: size) nullable *opaque;
export type SDL_calloc_func = *fn(nmemb: size, size_: size) nullable *opaque;
export type SDL_realloc_func = *fn(mem: *opaque, size_: size) nullable *opaque;
export type SDL_free_func = *fn(mem: *opaque) void;

export def SDL_ICONV_ERROR = 0xFFFFFFFFz;
export def SDL_ICONV_E2BIG = 0xFFFFFFFEz;
export def SDL_ICONV_EILSEQ = 0xFFFFFFFDz;
export def SDL_ICONV_EINVAL = 0xFFFFFFFCz;
export type SDL_iconv_t = size;

export @symbol("SDL_malloc") fn SDL_malloc(size_: size) nullable *opaque;
export @symbol("SDL_calloc") fn SDL_calloc(nmemb: size, size_: size) nullable *opaque;
export @symbol("SDL_realloc") fn SDL_realloc(mem: *opaque, size_: size) nullable *opaque;
export @symbol("SDL_free") fn SDL_free(mem: *opaque) void;
export @symbol("SDL_GetOriginalMemoryFunctions") fn SDL_GetOriginalMemoryFunctions(malloc_func: *SDL_malloc_func, calloc_func: *SDL_calloc_func, realloc_func: *SDL_realloc_func, free_func: *SDL_free_func) void;
export @symbol("SDL_GetMemoryFunctions") fn SDL_GetMemoryFunctions(malloc_func: *SDL_malloc_func, calloc_func: *SDL_calloc_func, realloc_func: *SDL_realloc_func, free_func: *SDL_free_func) void;
export @symbol("SDL_SetMemoryFunctions") fn SDL_SetMemoryFunctions(malloc_func: SDL_malloc_func, calloc_func: SDL_calloc_func, realloc_func: SDL_realloc_func, free_func: SDL_free_func) int;
export @symbol("SDL_GetNumAllocations") fn SDL_GetNumAllocations() int;
export @symbol("SDL_getenv") fn SDL_getenv(name: *c::char) nullable *c::char;
export @symbol("SDL_setenv") fn SDL_setenv(name: *c::char, value: *c::char, overwrite: int) int;
export @symbol("SDL_abs") fn SDL_abs(x: int) int;
export @symbol("SDL_isalpha") fn SDL_isalpha(x: int) int;
export @symbol("SDL_isalnum") fn SDL_isalnum(x: int) int;
export @symbol("SDL_isblank") fn SDL_isblank(x: int) int;
export @symbol("SDL_iscntrl") fn SDL_iscntrl(x: int) int;
export @symbol("SDL_isdigit") fn SDL_isdigit(x: int) int;
export @symbol("SDL_isxdigit") fn SDL_isxdigit(x: int) int;
export @symbol("SDL_ispunct") fn SDL_ispunct(x: int) int;
export @symbol("SDL_isspace") fn SDL_isspace(x: int) int;
export @symbol("SDL_isupper") fn SDL_isupper(x: int) int;
export @symbol("SDL_islower") fn SDL_islower(x: int) int;
export @symbol("SDL_isprint") fn SDL_isprint(x: int) int;
export @symbol("SDL_isgraph") fn SDL_isgraph(x: int) int;
export @symbol("SDL_toupper") fn SDL_toupper(x: int) int;
export @symbol("SDL_tolower") fn SDL_tolower(x: int) int;
export @symbol("SDL_crc16") fn SDL_crc16(crc: u16, data: *opaque, len_: size) u16;
export @symbol("SDL_crc32") fn SDL_crc32(crc: u32, data: *opaque, len_: size) u32;
export @symbol("SDL_memcmp") fn SDL_memcmp(s1: *opaque, s2: *opaque, len_: size) int;
export @symbol("SDL_wcslen") fn SDL_wcslen(wstr: *i32) size;
export @symbol("SDL_wcsdup") fn SDL_wcsdup(wstr: *i32) *i32;
export @symbol("SDL_wcsstr") fn SDL_wcsstr(haystack: *i32, needle: *i32) *i32;
export @symbol("SDL_wcscmp") fn SDL_wcscmp(str1: *i32, str2: *i32) int;
export @symbol("SDL_wcsncmp") fn SDL_wcsncmp(str1: *i32, str2: *i32, maxlen: size) int;
export @symbol("SDL_wcscasecmp") fn SDL_wcscasecmp(str1: *i32, str2: *i32) int;
export @symbol("SDL_wcsncasecmp") fn SDL_wcsncasecmp(str1: *i32, str2: *i32, len_: size) int;
export @symbol("SDL_strlen") fn SDL_strlen(str_: *c::char) size;
export @symbol("SDL_strdup") fn SDL_strdup(str_: *c::char) nullable *c::char;
export @symbol("SDL_strrev") fn SDL_strrev(str_: *c::char) nullable *c::char;
export @symbol("SDL_strupr") fn SDL_strupr(str_: *c::char) nullable *c::char;
export @symbol("SDL_strlwr") fn SDL_strlwr(str_: *c::char) nullable *c::char;
export @symbol("SDL_strchr") fn SDL_strchr(str_: *c::char, c: int) nullable *c::char;
export @symbol("SDL_strrchr") fn SDL_strrchr(str_: *c::char, c: int) nullable *c::char;
export @symbol("SDL_strstr") fn SDL_strstr(haystack: *c::char, needle: *c::char) nullable *c::char;
export @symbol("SDL_strcasestr") fn SDL_strcasestr(haystack: *c::char, needle: *c::char) *c::char;
export @symbol("SDL_strtokr") fn SDL_strtokr(s1: *c::char, s2: *c::char, saveptr: **c::char) nullable *c::char;
export @symbol("SDL_utf8strlen") fn SDL_utf8strlen(str_: *c::char) size;
export @symbol("SDL_utf8strnlen") fn SDL_utf8strnlen(str_: *c::char, bytes: size) size;
export @symbol("SDL_itoa") fn SDL_itoa(value: int, str_: *c::char, radix: int) nullable *c::char;
export @symbol("SDL_uitoa") fn SDL_uitoa(value: int, str_: *c::char, radix: int) nullable *c::char;
export @symbol("SDL_ltoa") fn SDL_ltoa(value: i32, str_: *c::char, radix: int) nullable *c::char;
export @symbol("SDL_ultoa") fn SDL_ultoa(value: i32, str_: *c::char, radix: int) nullable *c::char;
export @symbol("SDL_lltoa") fn SDL_lltoa(value: i64, str_: *c::char, radix: int) nullable *c::char;
export @symbol("SDL_ulltoa") fn SDL_ulltoa(value: u64, str_: *c::char, radix: int) nullable *c::char;
export @symbol("SDL_atoi") fn SDL_atoi(str_: *c::char) int;
export @symbol("SDL_atof") fn SDL_atof(str_: *c::char) f64;
export @symbol("SDL_strtol") fn SDL_strtol(str_: *c::char, endp: **c::char, base: int) i32;
export @symbol("SDL_strtoll") fn SDL_strtoll(str_: *c::char, endp: **c::char, base: int) i64;
export @symbol("SDL_strtoull") fn SDL_strtoull(str_: *c::char, endp: **c::char, base: int) u64;
export @symbol("SDL_strtod") fn SDL_strtod(str_: *c::char, endp: **c::char) f64;
export @symbol("SDL_strcmp") fn SDL_strcmp(str1: *c::char, str2: *c::char) int;
export @symbol("SDL_strncmp") fn SDL_strncmp(str1: *c::char, str2: *c::char, maxlen: size) int;
export @symbol("SDL_strcasecmp") fn SDL_strcasecmp(str1: *c::char, str2: *c::char) int;
export @symbol("SDL_strncasecmp") fn SDL_strncasecmp(str1: *c::char, str2: *c::char, len_: size) int;
export @symbol("SDL_acos") fn SDL_acos(x: f64) f64;
export @symbol("SDL_acosf") fn SDL_acosf(x: f32) f32;
export @symbol("SDL_asin") fn SDL_asin(x: f64) f64;
export @symbol("SDL_asinf") fn SDL_asinf(x: f32) f32;
export @symbol("SDL_atan") fn SDL_atan(x: f64) f64;
export @symbol("SDL_atanf") fn SDL_atanf(x: f32) f32;
export @symbol("SDL_atan2") fn SDL_atan2(y: f64, x: f64) f64;
export @symbol("SDL_atan2f") fn SDL_atan2f(y: f32, x: f32) f32;
export @symbol("SDL_ceil") fn SDL_ceil(x: f64) f64;
export @symbol("SDL_ceilf") fn SDL_ceilf(x: f32) f32;
export @symbol("SDL_copysign") fn SDL_copysign(x: f64, y: f64) f64;
export @symbol("SDL_copysignf") fn SDL_copysignf(x: f32, y: f32) f32;
export @symbol("SDL_cos") fn SDL_cos(x: f64) f64;
export @symbol("SDL_cosf") fn SDL_cosf(x: f32) f32;
export @symbol("SDL_exp") fn SDL_exp(x: f64) f64;
export @symbol("SDL_expf") fn SDL_expf(x: f32) f32;
export @symbol("SDL_fabs") fn SDL_fabs(x: f64) f64;
export @symbol("SDL_fabsf") fn SDL_fabsf(x: f32) f32;
export @symbol("SDL_floor") fn SDL_floor(x: f64) f64;
export @symbol("SDL_floorf") fn SDL_floorf(x: f32) f32;
export @symbol("SDL_trunc") fn SDL_trunc(x: f64) f64;
export @symbol("SDL_truncf") fn SDL_truncf(x: f32) f32;
export @symbol("SDL_fmod") fn SDL_fmod(x: f64, y: f64) f64;
export @symbol("SDL_fmodf") fn SDL_fmodf(x: f32, y: f32) f32;
export @symbol("SDL_log") fn SDL_log(x: f64) f64;
export @symbol("SDL_logf") fn SDL_logf(x: f32) f32;
export @symbol("SDL_pow") fn SDL_pow(x: f64, y: f64) f64;
export @symbol("SDL_powf") fn SDL_powf(x: f32, y: f32) f32;
export @symbol("SDL_round") fn SDL_round(x: f64) f64;
export @symbol("SDL_roundf") fn SDL_roundf(x: f32) f32;
export @symbol("SDL_lround") fn SDL_lround(x: f64) i32;
export @symbol("SDL_lroundf") fn SDL_lroundf(x: f32) i32;
export @symbol("SDL_scalbn") fn SDL_scalbn(x: f64, n: int) f64;
export @symbol("SDL_scalbnf") fn SDL_scalbnf(x: f32, n: int) f32;
export @symbol("SDL_sin") fn SDL_sin(x: f64) f64;
export @symbol("SDL_sinf") fn SDL_sinf(x: f32) f32;
export @symbol("SDL_sqrt") fn SDL_sqrt(x: f64) f64;
export @symbol("SDL_sqrtf") fn SDL_sqrtf(x: f32) f32;
export @symbol("SDL_tan") fn SDL_tan(x: f64) f64;
export @symbol("SDL_tanf") fn SDL_tanf(x: f32) f32;
export @symbol("SDL_iconv_open") fn SDL_iconv_open(tocode: *c::char, fromcode: *c::char) *SDL_iconv_t;
export @symbol("SDL_iconv_close") fn SDL_iconv_close(cd: *SDL_iconv_t) int;
export @symbol("SDL_iconv") fn SDL_iconv(cd: *SDL_iconv_t, inbuf: **c::char, inbytesleft: *size, outbuf: **c::char, outbytesleft: *size) size;
export @symbol("SDL_iconv_string") fn SDL_iconv_string(tocode: *c::char, fromcode: *c::char, inbuf: *c::char, inbytesleft: size) nullable *c::char;
